import BigNumber from 'bignumber.js'

const ZERO_BN = new BigNumber(0)
const ONE_BN = new BigNumber(1)
const Q192 = new BigNumber(2).pow(new BigNumber(192))

const exponentToBigDecimal = (decimals: BigNumber): BigNumber => {
    let bd = new BigNumber(1)

    for (let i = ZERO_BN; i.lt(decimals); i = i.plus(ONE_BN)) {
        bd = bd.times(new BigNumber(10))
    }

    return bd
}

const safeDiv = (amount0: BigNumber, amount1: BigNumber): BigNumber => {
    if (amount1.eq(ZERO_BN)) {
        return ZERO_BN
    }

    return amount0.div(amount1)
}

/**
 * 
 * @param sqrtPriceX96 the price of the token generated by uniswap on every swap
 * @param token0Decimals the number of decimals of the first token
 * @param token1Decimals the number of decimals of the second token
 * @returns an arrray containing the prices in decimal number of each token with respect to the other
 */
const sqrtPriceX96ToTokenPrices = (
    sqrtPriceX96: BigNumber,
    token0Decimals: BigNumber,
    token1Decimals: BigNumber
): BigNumber[] => {
    let num = sqrtPriceX96.times(sqrtPriceX96)
    let price1 = num
        .div(Q192)
        .times(exponentToBigDecimal(token0Decimals))
        .div(exponentToBigDecimal(token1Decimals))

    let price0 = safeDiv(new BigNumber(1), price1)

    return [price0, price1]
}

/**

This example shows the price of BTC/USDC

let price = sqrtPriceX96ToTokenPrices(new BigNumber(1231301921750926366182683803774), new BigNumber(8), new BigNumber(6))

console.log(price[0].toString())
console.log(price[1].toString())

 */

export default sqrtPriceX96ToTokenPrices